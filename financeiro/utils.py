import json
import os
from django.utils import timezone
import time
import uuid
from datetime import datetime, timedelta
import plotly.io as pio
import io
import base64
import pytz
from decouple import config
import openai
import plotly.graph_objects as go

from dashboard.models import TemporaryLink

openai.api_key = config('APIKEY')


def limpar_base64(data: str):
    clean_str = data.replace(' ', '+').replace('\n', '')
    return clean_str


def salvar_arquivo_temporario(base64_str, extensao=".jpg"):
    os.makedirs("tmp", exist_ok=True)
    caminho = f"tmp/{uuid.uuid4()}{extensao}"
    base64_str = limpar_base64(base64_str)
    try:
        with open(caminho, "wb") as f:
            f.write(base64.b64decode(base64_str))
    except base64.binascii.Error:
        raise ValueError("Base64 inv√°lido")
    return caminho


def categorias_financeiras_prompt():
    fuso_brasilia = pytz.timezone('America/Sao_Paulo')
    data_hoje = datetime.now(fuso_brasilia).date().isoformat()

    return f"""
Hoje √© {data_hoje}.
Voc√™ √© um assistente financeiro amig√°vel que conversa com o usu√°rio sobre suas finan√ßas.

üìå Regras obrigat√≥rias:
- Sempre que poss√≠vel, retorne um JSON estruturado de forma correta.
- Se o usu√°rio n√£o mencionar uma data expl√≠cita para o registro, assuma que a transa√ß√£o √© para hoje.
- A data deve sempre estar no formato ISO: yyyy-mm-dd.
- A descri√ß√£o deve ser preenchida com base na mensagem, mesmo que resumida.
- A categoria deve usar exatamente a subcategoria informada no cat√°logo, com acentua√ß√£o e capitaliza√ß√£o correta.
- Se o usu√°rio mencionar uma categoria principal sem uma subcategoria espec√≠fica, preencha \"categoria_principal\" e deixe \"categoria\" como null.
- Se o usu√°rio mencionar uma subcategoria (ex: Ifood, IPVA), a \"categoria_principal\" deve ser null.
- Nunca pe√ßa ao usu√°rio mais informa√ß√µes. Fa√ßa o melhor poss√≠vel com o que foi fornecido.
- Para mensagens gen√©ricas ou cumprimentos, responda com uma mensagem textual simp√°tica ‚Äî n√£o JSON.


Voc√™ pode responder com mensagens livres para cumprimentos e d√∫vidas.

Quando o usu√°rio quiser registrar, consultar, atualizar ou remover uma transa√ß√£o, responda obrigatoriamente com um JSON estruturado. Isso vale para mensagens de texto, audio e imagens.

Exemplos:

Registro:
{{
  "tipo": "registro",
  "valor": 80.5,
  "categoria": "IPVA",
  "descricao": "Paguei o IPVA",
  "data": "2025-04-04",
  "tipo_lancamento": "despesa"
}}

Consulta:
{{
  "tipo": "consulta",
  "data_inicial": "2025-04-01",
  "data_final": "2025-04-30",
  "categoria": "Plano de sa√∫de",
  "categoria_principal": null,
  "tipo_lancamento": "despesa",
  "grafico": false
}}

Atualizar:
{{
  "tipo": "atualizar",
  "campo": "categoria",
  "valor": "Supermercado",
  "codigo": "ABC123"  # opcional
}}

Remover:
{{
  "tipo": "remover",
  "codigo": "ABC123"  # opcional
}}

Se a mensagem for apenas uma sauda√ß√£o ou d√∫vida, responda com uma mensagem textual simp√°tica.
Use apenas as seguintes subcategorias com suas respectivas categorias principais (mantenha acentua√ß√£o e capitaliza√ß√£o corretas):
Se o usu√°rio n√£o especificar data, considere que a transa√ß√£o seja para hoje.
Se na consulta ele n√£o especificar o periodo, considere o primeiro dia do ano atual ate o dia de hoje.
Despesas:

Categoria principal: HABITA√á√ÉO
- Aluguel, Condom√≠nio, Manuten√ß√£o residencial, Reforma, M√≥veis e decora√ß√£o

Categoria principal: CONTAS RESIDENCIAIS
- Energia, √Ågua, Telefone, Internet, G√°s, TV por assinatura

Categoria principal: SUPERMERCADO
- Mercearia, A√ßougue, Hortifruti, Frios e latic√≠nios, Padaria, Bebidas, Produtos de limpeza, Produtos de higiene, Alimentos industrializados, Congelados, Petiscos e snacks, Produtos infantis, Utens√≠lios dom√©sticos, Produtos para pets, Produtos de papelaria, Compras no supermercado 

Categoria principal: ALIMENTA√á√ÉO
- Refei√ß√µes e lanches, Ifood, Restaurante, Cafeteria, Alimentos

Categoria principal: LAZER
- Cinema e teatro, Festas e eventos, Hobbies, Viagens, Passeios, Jogos

Categoria principal: ASSINATURAS E SERVI√áOS
- Streamings, Aplicativos, Clube de vantagens, Jornais e revistas

Categoria principal: COMPRAS
- Roupas e acess√≥rios, Compras diversas, Eletr√¥nicos, Acess√≥rios para casa, Acess√≥rios para carro

Categoria principal: CUIDADOS PESSOAIS
- Higiene pessoal, Sal√£o de beleza, Barbearia, Est√©tica, Academia

Categoria principal: D√çVIDAS E EMPR√âSTIMOS
- Financiamentos, Empr√©stimo, Parcelamentos, Cart√£o de cr√©dito

Categoria principal: EDUCA√á√ÉO
- Escola/Faculdade, Material escolar, Cursos extracurriculares, Cursos online, Livros

Categoria principal: FAM√çLIA E FILHOS
- Mesada, Ajuda de custo, Creche, Roupas infantis, Atividades infantis

Categoria principal: IMPOSTOS E TAXAS
- Taxas banc√°rias, IPTU, IPVA, Anuidade de cart√£o, Multas

Categoria principal: INVESTIMENTOS
- Reserva de emerg√™ncia, Aposentadoria, Objetivos, Criptomoedas, A√ß√µes

Categoria principal: PRESENTES E DOA√á√ïES
- D√≠zimo, Presentes, Doa√ß√µes, Caridade

Categoria principal: SA√öDE
- Medicamentos, Plano de sa√∫de, Consultas particulares, Exames, Terapias

Categoria principal: SEGUROS
- Seguro de vida, Seguro automotivo, Seguro residencial, Seguro sa√∫de

Categoria principal: DESPESAS DE TRABALHO
- Custos diversos, Despesas operacionais, Material de escrit√≥rio, Ferramentas, Transporte a trabalho

Categoria principal: TRANSPORTE
- Combust√≠vel, Manuten√ß√£o, T√°xi/Transporte por aplicativo, Transporte p√∫blico, Estacionamento, Ped√°gio

Categoria principal: PETS
- Ra√ß√£o, Pet shop, Veterin√°rio, Acess√≥rios para pets, Banho e tosa

Categoria principal: OUTROS
- Sem categoria

Receitas:

Categoria principal: RENDAS ATIVAS
- Sal√°rio/Pr√≥-labore, Freelas/B√¥nus / Comiss√£o, 13¬∫ Sal√°rio/Hora extra, Participa√ß√£o nos lucros

Categoria principal: RENDAS PASSIVAS
- Rendimentos de investimentos (CDBs, Tesouro, Fundos, etc.), Dividendos de a√ß√µes e FIIs, Alugu√©is, Royalties, Juros recebidos

Categoria principal: VENDAS EVENTUAIS
- Bens usados, Marketplace, Venda de milhas, Venda de objetos pessoais

Categoria principal: OUTROS
- Cashback, Pr√™mios, Presentes, Heran√ßa, Restitui√ß√£o de imposto
"""


def transcrever_audio(caminho):
    with open(caminho, "rb") as f:
        result = openai.Audio.transcribe("whisper-1", f)
        return result["text"]


def interpretar_imagem_gpt4_vision(image, retries=3):

    image = limpar_base64(image)
    for attempt in range(retries):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": categorias_financeiras_prompt()},
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1000
            )
            content = response["choices"][0]["message"]["content"]

            if content.startswith("```"):
                content = content.strip("`")
                if content.lower().startswith("json"):
                    content = content[4:].strip()

            try:
                return json.loads(content)
            except Exception:
                return content
        except Exception as e:
            print(f"Tentativa {attempt + 1} falhou. Erro: {e}")
            time.sleep(2)
    return None


def interpretar_mensagem(mensagem_usuario):
    prompt_sistema = categorias_financeiras_prompt()

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        temperature=0.3,
        messages=[
            {"role": "system", "content": prompt_sistema},
            {"role": "user", "content": mensagem_usuario}
        ]
    )

    content = response['choices'][0]['message']['content'].strip()
    if content.startswith("```"):
        content = content.strip("`")
        if content.lower().startswith("json"):
            content = content[4:].strip()

    try:
        return json.loads(content)
    except Exception:
        return content


def formatar_resposta_registro(transacao):
    tipo = transacao.tipo
    valor = f"R$ {transacao.amount:.2f}".replace('.', ',')
    categoria = transacao.category.name
    descricao = transacao.description
    data = transacao.date.strftime("%d/%m/%Y")

    return (
        "‚úÖ *Transa√ß√£o registrada!*\n\n"
        f"_Tipo:_ *{tipo.upper()}*\n"
        f"_Valor:_ *{valor}*\n"
        f"_Categoria:_ *{categoria.upper()}*\n"
        f"_Descri√ß√£o:_ `{descricao.capitalize()}`\n"
        f"_Data:_ *{data}*\n\n"
        f"_C√≥digo:_ *#{transacao.code.upper()}*\n"
    )


def formatar_resposta_consulta(transacoes, data_inicial, data_final, categoria=None, tipo=None):
    if not transacoes:
        return "‚ùå *Nenhum Registro Encontrado Para Este Per√≠odo*"

    inicio = data_inicial.strftime("%d/%m/%Y")
    fim = data_final.strftime("%d/%m/%Y")

    receitas = [t.amount for t in transacoes if t.tipo == 'receita']
    despesas = [t.amount for t in transacoes if t.tipo == 'despesa']

    total_receita = sum(receitas)
    total_despesa = sum(despesas)
    saldo = total_receita - total_despesa

    total_receita_str = f"R$ {total_receita:.2f}".replace('.', ',')
    total_despesa_str = f"R$ {total_despesa:.2f}".replace('.', ',')
    saldo_str = f"R$ {saldo:.2f}".replace('.', ',')

    header = (
        "üìä *Resumo de transa√ß√µes*\n"
        f"_Per√≠odo:_ *{inicio}* at√© *{fim}*\n"
        f"_Categoria:_ *{categoria if categoria else 'TODAS'}*\n"
        f"_Receitas:_ *{total_receita_str}*\n"
        f"_Despesas:_ *{total_despesa_str}*\n"
        f"_Saldo:_ *{saldo_str}*\n\n"
        "*Transa√ß√µes:* \n"
    )

    linhas = []
    for i, t in enumerate(transacoes, 1):
        valor = f"R$ {t.amount:.2f}".replace('.', ',')
        desc = t.description
        data = t.created_at.strftime("%d/%m/%Y")
        tipo_str = "‚¨ÜÔ∏è Receita" if t.tipo == "receita" else "‚¨áÔ∏è Despesa"
        linhas.append(f"{i}. *{valor}* - `{desc}` _({data})_ {tipo_str}\n")

    token_obj, created = TemporaryLink.objects.get_or_create(
        user=transacoes[0].user,
        defaults={
            'token': uuid.uuid4().hex,
            'expires_at': timezone.now() + timedelta(days=1)
        }
    )

    if not created and token_obj.expires_at < timezone.now():
        token_obj.token = uuid.uuid4().hex
        token_obj.expires_at = timezone.now() + timedelta(days=1)
        token_obj.save()

    url = f"{config('BASE_URL_SITE')}/dashboard/temp/{token_obj.token}"

    link = (
        f"\nüîó Voc√™ tamb√©m pode verificar seu extrato completo em:\n\n {url}"
    )

    return header + "\n" + "".join(linhas) + "\n" + link
