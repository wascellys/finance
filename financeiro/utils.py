import json
import os
from django.utils import timezone
import time
import uuid
from datetime import datetime
import plotly.io as pio
import io
import base64
import pytz
from decouple import config
import openai
import plotly.graph_objects as go
from datetime import timedelta


from dashboard.models import TemporaryLink

openai.api_key = config('APIKEY')


def limpar_base64(data: str):
    # Remove espa√ßos, quebras de linha e caracteres inv√°lidos
    clean_str = data.replace(' ', '+').replace('\n', '')

    return clean_str


def salvar_arquivo_temporario(base64_str, extensao=".jpg"):
    os.makedirs("tmp", exist_ok=True)  # garante a pasta tmp
    caminho = f"tmp/{uuid.uuid4()}{extensao}"

    base64_str = limpar_base64(base64_str)

    try:
        with open(caminho, "wb") as f:
            f.write(base64.b64decode(base64_str))
    except base64.binascii.Error:
        raise ValueError("Base64 inv√°lido")

    return caminho


def categorias_financeiras_prompt():
    return """
Use apenas as seguintes subcategorias (com acentua√ß√£o e capitaliza√ß√£o corretas):

Despesas:
- Aluguel, Condom√≠nio, Manuten√ß√£o residencial, Reforma, M√≥veis e decora√ß√£o
- Energia, √Ågua, Telefone, Internet, G√°s, TV por assinatura
- Mercearia, A√ßougue, Hortifruti, Frios e latic√≠nios, Padaria, Bebidas, Produtos de limpeza, Produtos de higiene, Alimentos industrializados, Congelados, Petiscos e snacks, Produtos infantis, Utens√≠lios dom√©sticos, Produtos para pets, Produtos de papelaria
- Refei√ß√µes e lanches, Ifood, Restaurante, Cafeteria, Alimentos
- Cinema e teatro, Festas e eventos, Hobbies, Viagens, Passeios, Jogos
- Streamings, Aplicativos, Clube de vantagens, Jornais e revistas
- Roupas e acess√≥rios, Compras diversas, Eletr√¥nicos, Acess√≥rios para casa, Acess√≥rios para carro
- Higiene pessoal, Sal√£o de beleza, Barbearia, Est√©tica, Academia
- Financiamentos, Empr√©stimo, Parcelamentos, Cart√£o de cr√©dito
- Escola/Faculdade, Material escolar, Cursos extracurriculares, Cursos online, Livros
- Mesada, Ajuda de custo, Creche, Roupas infantis, Atividades infantis
- Taxas banc√°rias, IPTU, IPVA, Anuidade de cart√£o, Multas
- Reserva de emerg√™ncia, Aposentadoria, Objetivos, Criptomoedas, A√ß√µes
- D√≠zimo, Presentes, Doa√ß√µes, Caridade
- Medicamentos, Plano de sa√∫de, Consultas particulares, Exames, Terapias
- Seguro de vida, Seguro automotivo, Seguro residencial, Seguro sa√∫de
- Custos diversos, Despesas operacionais, Material de escrit√≥rio, Ferramentas, Transporte a trabalho
- Combust√≠vel, Manuten√ß√£o, T√°xi/Transporte por aplicativo, Transporte p√∫blico, Estacionamento, Ped√°gio
- Ra√ß√£o, Pet shop, Veterin√°rio, Acess√≥rios para pets, Banho e tosa
- Sem categoria

Receitas:
- Sal√°rio/Pr√≥-labore, Freelas/B√¥nus / Comiss√£o, 13¬∫ Sal√°rio/Hora extra, Participa√ß√£o nos lucros
- Rendimentos de investimentos (CDBs, Tesouro, Fundos, etc.), Dividendos de a√ß√µes e FIIs, Alugu√©is, Royalties, Juros recebidos
- Bens usados, Marketplace, Venda de milhas, Venda de objetos pessoais
- Cashback, Pr√™mios, Presentes, Heran√ßa, Restitui√ß√£o de imposto

üìå Apenas subcategorias s√£o v√°lidas. Se o usu√°rio mencionar apenas a categoria principal, retorne "irrelevante". 
   Caso o usu√°rio fa√ßa algum agradeicmento, retorne "agradecimento".
"""


def transcrever_audio(caminho):
    with open(caminho, "rb") as f:
        result = openai.Audio.transcribe("whisper-1", f)
        return result["text"]


def interpretar_imagem_gpt4_vision(image, retries=3):
    for attempt in range(retries):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": categorias_financeiras_prompt},
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1000
            )
            return response["choices"][0]["message"]["content"]
        except Exception as e:
            print(f"Tentativa {attempt + 1} falhou. Erro: {e}")
            time.sleep(2)
    return None


agradecimentos = ["obrigado", "obrigada", "valeu", "agrade√ßo", "muito obrigado", "grato", "grata"]


def interpretar_mensagem(mensagem_usuario):
    fuso_brasilia = pytz.timezone('America/Sao_Paulo')
    data_hoje = datetime.now(fuso_brasilia).date().isoformat()

    if any(palavra in mensagem_usuario.lower() for palavra in agradecimentos):
        data = {
            "tipo": "agradecimento",
            "mensagem": "De nada! Estou sempre aqui para ajudar. üòä"
        }

        return json.dumps(data)

    prompt_sistema = (
            f"Hoje √© {data_hoje}. "
            "Voc√™ √© um assistente financeiro que interpreta mensagens de usu√°rios sobre *registro* ou *consulta* de transa√ß√µes financeiras. "
            "Sua resposta deve ser sempre e somente um JSON estruturado, com as seguintes possibilidades:\n\n"
            "1. Para *registro* de uma transa√ß√£o:\n"
            "{\n"
            '  "tipo": "registro",\n'
            '  "valor": 1200,\n'
            '  "categoria": "IPVA",\n'
            '  "descricao": "paguei o IPVA",\n'
            '  "data": "2025-04-04",\n'
            '  "tipo_lancamento": "despesa"\n'
            "}\n\n"
            "2. Para *consulta* de transa√ß√µes:\n"
            "{\n"
            '  "tipo": "consulta",\n'
            '  "data_inicial": "2025-04-01",\n'
            '  "data_final": "2025-04-30",\n'
            '  "categoria": "Plano de sa√∫de",\n'
            '  "tipo_lancamento": "despesa",\n'
            '  "grafico": false\n'
            "}\n\n"
            "3. Se a mensagem for um agradecimento (ex: obrigado, valeu), retorne:\n"
            '{ "tipo": "agradecimento", "mensagem": "De nada! Estou sempre aqui para ajudar. üòä" }\n\n'
            "4. Se a mensagem n√£o estiver relacionada a finan√ßas, retorne:\n"
            '{ "tipo": "irrelevante" }\n\n'
            "üìå **Regras importantes:**\n"
            "- Sempre use datas no formato ISO: yyyy-mm-dd\n"
            "- Sempre use o nome exato da subcategoria com acentua√ß√£o e capitaliza√ß√£o corretas (ex: \"IPVA\", \"Plano de sa√∫de\")\n"
            "- Retorne \"categoria\": \"Sem categoria\" apenas se o usu√°rio mencionar isso literalmente\n"
            "- Se n√£o houver categoria mencionada na consulta, omita esse campo ou use null\n"
            "- Se n√£o periodo mensinado na consulta, considerar o periodo do primeiro dia do ano at√© o dia de hoje\n"
            "- S√≥ deve ser gerado gr√°fico caso o usu√°rio mencione que quer gr√°fico\n"
            "- Sempre inclua o campo \"tipo_lancamento\" quando for poss√≠vel inferir\n\n"
            "üìö *Palavras associadas a despesas* (inferir tipo_lancamento = 'despesa'):\n"
            "- gastei, paguei, comprei, adquiri, investi, doei, transferi, saquei, apliquei, pagaram, quitar, desembolsei\n\n"
            "üìö *Palavras associadas a receitas* (inferir tipo_lancamento = 'receita'):\n"
            "- recebi, ganhei, entrou, caiu na conta, dep√≥sito, pagaram para mim, cr√©dito, b√¥nus, pr√™mio, heran√ßa, ou sinonimos\n\n"
            "üìö *Palavras associadas a consulta*:\n"
            "- quero ver, me mostre, consultar, quanto gastei, quanto recebi, listar, exibir, mostrar, extrato, relat√≥rio, saldo, meu saldo ou sinonimos\n\n"
            + categorias_financeiras_prompt()
    )

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        temperature=0,
        messages=[
            {"role": "system", "content": prompt_sistema},
            {"role": "user", "content": mensagem_usuario}
        ]
    )

    return response['choices'][0]['message']['content']


def formatar_resposta_registro(transacao):
    tipo = transacao.tipo
    valor = f"R$ {transacao.amount:.2f}".replace('.', ',')
    categoria = transacao.category.name
    descricao = transacao.description
    data = transacao.date.strftime("%d/%m/%Y")

    return (
        "‚úÖ *Transa√ß√£o registrada!*\n\n"
        f"_Tipo:_ *{tipo.upper()}*\n"
        f"_Valor:_ *{valor}*\n"
        f"_Categoria:_ *{categoria.upper()}*\n"
        f"_Descri√ß√£o:_ `{descricao.capitalize()}`\n"
        f"_Data:_ *{data}*\n\n"
        f"_C√≥digo:_ *#{transacao.code.upper()}*\n"
    )


def formatar_resposta_consulta(transacoes, data_inicial, data_final, categoria=None, tipo=None):
    if not transacoes:
        return "‚ùå *Nenhum Registro Encontrado Para Este Per√≠odo*"

    inicio = data_inicial.strftime("%d/%m/%Y")
    fim = data_final.strftime("%d/%m/%Y")

    receitas = [t.amount for t in transacoes if t.tipo == 'receita']
    despesas = [t.amount for t in transacoes if t.tipo == 'despesa']

    total_receita = sum(receitas)
    total_despesa = sum(despesas)
    saldo = total_receita - total_despesa

    total_receita_str = f"R$ {total_receita:.2f}".replace('.', ',')
    total_despesa_str = f"R$ {total_despesa:.2f}".replace('.', ',')
    saldo_str = f"R$ {saldo:.2f}".replace('.', ',')

    header = (
        "üìä *Resumo de transa√ß√µes*\n"
        f"_Per√≠odo:_ *{inicio}* at√© *{fim}*\n"
        f"_Categoria:_ *{categoria if categoria else 'TODAS'}*\n"
        f"_Receitas:_ *{total_receita_str}*\n"
        f"_Despesas:_ *{total_despesa_str}*\n"
        f"_Saldo:_ *{saldo_str}*\n\n"
        "*Transa√ß√µes:* \n"
    )

    linhas = []
    for i, t in enumerate(transacoes, 1):
        valor = f"R$ {t.amount:.2f}".replace('.', ',')
        desc = t.description
        data = t.created_at.strftime("%d/%m/%Y")
        tipo_str = "‚¨ÜÔ∏è Receita" if t.tipo == "receita" else "‚¨áÔ∏è Despesa"
        linhas.append(f"{i}. *{valor}* - `{desc}` _({data})_ {tipo_str}\n")

    # Gera√ß√£o de link tempor√°rio
    token_obj, created = TemporaryLink.objects.get_or_create(
        user=transacoes[0].user,
        defaults={
            'token': uuid.uuid4().hex,
            'expires_at': timezone.now() + timedelta(days=1)
        }
    )

    if not created and token_obj.expires_at < timezone.now():
        token_obj.token = uuid.uuid4().hex
        token_obj.expires_at = timezone.now() + timedelta(days=1)
        token_obj.save()

    url = f"{config('BASE_URL_SITE')}/dashboard/temp/{token_obj.token}"

    link = (
        f"\nüîó Voc√™ tamb√©m pode verificar seu extrato completo em:\n\n {url}"
    )

    return header + "\n" + "".join(linhas) + "\n" + link


def gerar_grafico_base64(transacoes):
    categorias = {}
    for t in transacoes:
        cat = t.category.name
        categorias[cat] = categorias.get(cat, 0) + float(t.amount)

    if not categorias:
        return None

    labels = list(categorias.keys())
    valores = list(categorias.values())

    fig = go.Figure(
        data=[
            go.Bar(
                x=labels,
                y=valores,
                marker=dict(color='indigo'),
                text=[f"R$ {v:.2f}".replace('.', ',') for v in valores],
                textposition='auto'
            )
        ]
    )

    fig.update_layout(
        title='Gastos por Categoria',
        xaxis_title='Categoria',
        yaxis_title='Valor (R$)',
        template='plotly_dark',
        height=500,
        margin=dict(l=30, r=30, t=50, b=50),
    )

    # Salvar como imagem base64
    buffer = io.BytesIO()
    pio.write_image(fig, buffer, format='png')  # Requer instala√ß√£o do kaleido
    buffer.seek(0)
    imagem_base64 = base64.b64encode(buffer.read()).decode('utf-8')

    return imagem_base64
